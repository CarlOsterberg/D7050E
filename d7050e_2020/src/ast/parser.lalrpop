use std::str::FromStr;

use crate::ast::*;

grammar;

//-----------------------------------------------------
//Statement
//-----------------------------------------------------

Read: String = {
    "let mut" => String::from_str("Mutable").unwrap(),
    "let" => String::from_str("Readable").unwrap(),
};

Type: String = {
    ":" <Var>,
};

Assign: Box<Expr> = {
    "=" <Expr> ,
};

While: Box<Expr> = {
    "while" <BoolAlg>,
}

Do: Vec<Box<Expr>> = {
    "{"<Stmnts>"}",
}
Stmnts = SemiColon<Expr>;

SemiColon<T>: Vec<T> = {
    <v:(<T> ";")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};
ClosingBracket<T>: Vec<T> = {
    <v:(<T> "}")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

//-----------------------------------------------------
//Expression
//-----------------------------------------------------

pub Expr: Box<Expr> = {
    Read Var Type Assign => Box::new(Expr::Let(<>)),
    While Do => Box::new(Expr::While(<>)),
    BoolAlg,
};

BoolAlg: Box<Expr> = {
    BoolAlg BoolAlgOp Elemen => Box::new(Expr::Infix(<>)),
    Elemen,
};

Elemen: Box<Expr> = {
    Elemen ExprOp Factor => Box::new(Expr::Infix(<>)),
    Factor,
};

Factor: Box<Expr> = {
    Factor FactorOp Term => Box::new(Expr::Infix(<>)),
    Term,
};

Term: Box<Expr> = {
    PrefixOp Term => Box::new(Expr::Prefix(<>)),
    Num => Box::new(Expr::Number(<>)),
    Bool => Box::new(Expr::Boolean(<>)),
    Var => Box::new(Expr::Variable(<>)),
    "(" <Expr> ")"
};

//translations into operands

PrefixOp: Opcode = {
    "-" => Opcode::Negate,
    "!" => Opcode::Not,
};

BoolAlgOp: Opcode = {
    "<" => Opcode::Less,
    ">" => Opcode::Greater,
    "||" => Opcode::Or,
    "&&" => Opcode::And,
    "==" => Opcode::Equals,
};

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

//base terms, i32, 

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};

Bool: bool = {
    "true" => bool::from_str(<>).unwrap(),
    "false" => bool::from_str(<>).unwrap(),
};

Var: String = {
    r"(_|[a-z]|[A-Z])([a-z]|[A-Z]|[0-9]|_)*" => String::from_str(<>).unwrap(),
};