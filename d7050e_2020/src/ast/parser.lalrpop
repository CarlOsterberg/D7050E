use std::str::FromStr;

use crate::ast::*;

grammar;

pub Program: Vec<Box<Expr>> = {
    <Stmnts>
}

//-----------------------------------------------------
//Statement
//-----------------------------------------------------
Func: Box<Expr> = {
    "fn" <n:Var> "("<arg:FnArg>")" "->"<t:RetType> <b:Body> => Box::new(Expr::Func(
        n,
        arg,
        t,
        b,
    )),
    "fn" <n:Var> "()" "->"<t:RetType> <b:Body> => Box::new(Expr::Func(
        n,
        vec!(),
        t,
        b,
    )),
}

VarType: Type = {
    "&" <t:VarType> => Type::Ref(Box::new(t)),
    "&mut " <v:VarType> => Type::RefMut(Box::new(v)),
    "i32" => Type::I32,
    "bool" => Type::Bool,
} 

RetType: Type = {
    "&"<t:VarType>=> Type::Ref(Box::new(t)),
    "&mut " <v:VarType> => Type::RefMut(Box::new(v)),
    "i32" => Type::I32,
    "bool" => Type::Bool,
    "()" => Type::Unit,
}

FnArg: Vec<(String,(Type,bool))> = {
    ArgList
}

m: bool = {
    "&mut " => true,
}

ArgType: (String,(Type,bool)) = {
    <b:m><v:Var>":"<vt:VarType> => {
        (v,
        (vt,
        b))
    },
    <v:Var>":"<vt:VarType> => {
        (v,
        (vt,
        false))
    }
}

ParamList = Comma<Expr>;

ArgList = Comma<ArgType>;

If: Box<Expr> = {
    "if" <e:Expr> <ib:Body> => Box::new(Expr::If(
        e,
        ib,
        None,
    )),
    "if" <e:Expr> <ib:Body> r"; ?else" <eb:Body> => Box::new(Expr::If(
        e,
        ib,
        Some(eb),
    )),
}

Assign: Box<Expr> = {
    <n:Var> "=" <e:Expr> => Box::new(Expr::Assign(
        Box::new(Expr::Variable(n)),
        e,
    )),
    <o:UnaryOp> <n:Var> "=" <e:Expr> => Box::new(Expr::Assign(
        Box::new(Expr::Unary(
            o,
            Box::new(Expr::Variable(n)),
        )),
        e,
    )),
};

Read: bool = {
    "let mut" => true,
    "let" => false,
};

Type: Type = {
    ":" <VarType>,
};

Let: Box<Expr> = {
    "=" <Expr> ,
};

While: Box<Expr> = {
    "while" <BoolAlg>,
}

Body: Vec<Box<Expr>> = {
    "{"<Stmnts>"}",
}
Stmnts = SemiColon<Expr>;

SemiColon<T>: Vec<T> = {
    <v:(<T> ";")*> <e:BoolAlg?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

//-----------------------------------------------------
//Expression
//-----------------------------------------------------

pub Expr: Box<Expr> = {
    If,
    Assign,
    Func,
    Read Var Type Let => Box::new(Expr::Let(<>)),
    While Body => Box::new(Expr::While(<>)),
    BoolAlg,
};

BoolAlg: Box<Expr> = {
    BoolAlg BoolAlgOp Elemen => Box::new(Expr::Infix(<>)),
    Elemen,
};

Elemen: Box<Expr> = {
    Elemen ExprOp Factor => Box::new(Expr::Infix(<>)),
    Factor,
};

Factor: Box<Expr> = {
    Factor FactorOp Term => Box::new(Expr::Infix(<>)),
    FuncCall,
    Term,
};

FuncCall: Box<Expr> = {
    <n:Var> "("<l:ParamList>")" => Box::new(Expr::FuncCall(
        n,
        l
    )),
    <n:Var> "()" => Box::new(Expr::FuncCall(
        n,
        vec!()
    ))
}

Term: Box<Expr> = {
    PrefixOp Term => Box::new(Expr::Prefix(<>)),
    Unary,
    Num => Box::new(Expr::Number(<>)),
    Bool => Box::new(Expr::Boolean(<>)),
    Var => Box::new(Expr::Variable(<>)),
    "(" <Expr> ")"
};

//translations into operands

PrefixOp: Opcode = {
    "-" => Opcode::Negate,
    "!" => Opcode::Not,
};

UnaryOp: Opcode = {
    "&mut " => Opcode::RefMut,
    "&" => Opcode::Ref,
    "*" => Opcode::Deref,
};

Unary: Box<Expr> = {
    <o:UnaryOp> <t:Term> => Box::new(Expr::Unary(
        o,
        t
    )),
}

BoolAlgOp: Opcode = {
    "<" => Opcode::Less,
    ">" => Opcode::Greater,
    "||" => Opcode::Or,
    "&&" => Opcode::And,
    "==" => Opcode::Equals,
};

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

//base terms, i32, 

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};

Bool: bool = {
    "true" => bool::from_str(<>).unwrap(),
    "false" => bool::from_str(<>).unwrap(),
};

Var: String = {
    r"(_|[a-z]|[A-Z])([a-z]|[A-Z]|[0-9]|_)*" => String::from_str(<>).unwrap(),
};