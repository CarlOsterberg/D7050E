use std::str::FromStr;

use crate::ast::*;

grammar;

pub Expr: Box<Expr> = {
    Expr BoolAlgOp Elemen => Box::new(Expr::Op(<>)),
    Elemen,
};

Elemen: Box<Expr> = {
    Elemen ExprOp Factor => Box::new(Expr::Op(<>)),
    Factor,
};

Factor: Box<Expr> = {
    Factor FactorOp Term => Box::new(Expr::Op(<>)),
    Term,
};

pub Term: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
    "(" <Expr> ")"
};

BoolAlgOp: Opcode = {
    "<" => Opcode::Less,
    ">" => Opcode::Greater,
    "||" => Opcode::Or,
    "&&" => Opcode::And,
    "==" => Opcode::Equals,
}

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};